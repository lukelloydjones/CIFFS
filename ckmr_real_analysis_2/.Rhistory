cumul_surv_2 <- exp( -Z_1 * (Bju - Yad))
(Bju < Yad) * cumul_surv_1 / Nf[ Yad] + (Bju > Yad) * cumul_surv_2 / Nf[ Bju]
#  Decomposition is:
#    ( Bju <= Yad ) * # was ad still alive at B[ju] ? Otherwise her ERRO was 0
#    if she was, then her ERRO is given by:
#    (N[ Bju] * cumul_surv) / N[ Yad]) /   # Pr[ she was a survivor from the pool of ...
# ... breeders at Bju, given she was adult at Yad]
#    N[ Bju]                               # / TRO=Total f adults at B[ju]
# Then cancel the N[Bju] from top & bottom
})
if( !all( is.finite( Pr_MOP_noage) & (Pr_MOP_noage >= 0) & (Pr_MOP_noage <= 1))) {
return( 1e10) # optim/nlminb has tried insane param values...
# ... this avoids NaN warnings from dbinom()
}
# ============================================
# Male POP dynamics, survival, and probabilities
# ============================================
## Population dynamics
Nm <- offarray( 0, first = data$bymin,
last  = data$symax)
Nm <- autoloop(yrs = years, {
#N0_m * exp( R_2 * (yrs - y0))
N0_m * exp( R_1 * (yrs - y0))
})
# # offarray::autoloop() evaluates an expression over all combos of the args
# # ... and returns an array indexed by all combos. Like using nested loops.
# # Indices must match n_comp[] and n_POP[], which are set up by boring_data_prep()
Pr_FOP_noage <- autoloop( Bju=Bju_range, Yad=Yad_range, {
cumul_surv_1 <- exp( -Z_1 * (Yad - Bju))
cumul_surv_2 <- exp( -Z_1 * (Bju - Yad))
(Bju < Yad) * cumul_surv_1 / Nm[ Yad] + (Bju > Yad) * cumul_surv_2 / Nm[ Bju]
#  Decomposition is:
#    ( Bju <= Yad ) * # was ad still alive at B[ju] ? Otherwise her ERRO was 0
#    if she was, then her ERRO is given by:
#    (N[ Bju] * cumul_surv) / N[ Yad]) /   # Pr[ she was a survivor from the pool of ...
# ... breeders at Bju, given she was adult at Yad]
#    N[ Bju]                               # / TRO=Total f adults at B[ju]
# Then cancel the N[Bju] from top & bottom
})
if( !all( is.finite( Pr_FOP_noage) & (Pr_FOP_noage >= 0) & (Pr_FOP_noage <= 1))) {
return( 1e10) # optim/nlminb has tried insane param values...
# ... this avoids NaN warnings from dbinom()
}
# ============================================
# Maternal HSPs survival, and probabilities
# ============================================
Pr_MHSP <- autoloop( B1=Bju_range, B2=Bju_range, {
# ORDER is important...
cumul_surv <- exp( -Z_1 * (B2-B1))
(B2 > B1) * cumul_surv / Nf[ B2]
})
# ===================================================
# Paternal HSPs dynamics, survival, and probabilities
# ===================================================
# Population dynamics
Pr_PHSP <- autoloop( B1=Bju_range, B2=Bju_range, {
# ORDER is important...
cumul_surv <- exp( -Z_1 * (B2-B1))
(B2 >= B1) * cumul_surv / Nm[ B2]
})
if( !all( is.finite( Pr_MHSP) & (Pr_MHSP >= 0) & (Pr_MHSP <= 1))) {
return( 1e10) # optim/nlminb has tried insane param values...
# ... this avoids NaN warnings from dbinom()
}
if( !all( is.finite( Pr_PHSP) & (Pr_PHSP >= 0) & (Pr_PHSP <= 1))) {
return( 1e10) # optim/nlminb has tried insane param values...
# ... this avoids NaN warnings from dbinom()
}
# ===================================================
# Calculate probability definitely a sibling
# ===================================================
Pr_MP <- autoloop(B1 = Bju_range, B2 = Bju_range, {
# Mother father are shared
and_mum <- alpha + log(Pr_MHSP[B1, B2] /  (1 - Pr_MHSP[B1, B2]))
(B2 > B1) * ( Pr_PHSP[B1, B2] * (1 / (1 + exp(-and_mum))) )
})
Pr_MbarP <- autoloop(B1 = Bju_range, B2 = Bju_range, {
# Event don't share a mother but a father
(B2 >= B1) * (Pr_PHSP[B1, B2] - Pr_MP[B1, B2])
})
Pr_MPbar <- autoloop(B1 = Bju_range, B2 = Bju_range, {
# Event don't share a father but a mother
(B2 > B1) * (Pr_MHSP[B1, B2] - Pr_MP[B1, B2])
})
Pr_DSib <- autoloop(B1 = Bju_range, B2 = Bju_range, {
# Probability of being a sibling
(B2 >= B1) * (Pr_MP[B1, B2] + Pr_MbarP[B1, B2] * fneg_rate +  Pr_MPbar[B1, B2] * fneg_rate )
})
if( !all( is.finite( Pr_DSib) & (Pr_DSib >= 0) & (Pr_DSib <= 1))) {
return( 1e10) # optim/nlminb has tried insane param values...
# ... this avoids NaN warnings from dbinom()
}
# -----------------
# POP contributions
# -----------------
lglk <- 0
# MOP
lglk <- lglk + sum( dbinom(data$kin_mop, size = data$comb_mop, prob = Pr_MOP_noage, log = TRUE))
# FOP
lglk <- lglk + sum( dbinom(data$kin_fop, size = data$comb_fop, prob = Pr_FOP_noage, log = TRUE))
# -----------------
# HSP contributions
# -----------------
# SIB
lglk <- lglk + sum(dbinom(data$kin_sib, size = data$comb_sib, prob = Pr_DSib, log = TRUE))
# ------------------------------------------------
# Refinement loop to correct for the ma/pa-ternity
# ------------------------------------------------
for (i in seq(1, dim(sib_pairs)[1]))
{
#print(i)
sib_stus <- sib_pairs$FSP[i]
bc1      <- sib_pairs$IND1_BC[i]
bc2      <- sib_pairs$IND2_BC[i]
pi_h2    <- sib_pairs$HAP1_FRQ[i]
sm_hap   <- sib_pairs$SAME_HAP[i]
#
# if (bc1 == bc2)
# {
#   next
# }
if (sib_stus == 1) # Full sib addition
{
lglk_fsib_i <- Pr_MP[bc1, bc2] / Pr_DSib[bc1, bc2]
lglk        <- lglk + as.numeric(log(lglk_fsib_i))
# print(paste0("Full sub contribution", log(lglk_fsib_i)))
} else if (sib_stus == 0)
{
lglk_hsib_i <- ( (Pr_MbarP[bc1, bc2] / Pr_DSib[bc1, bc2]) * pi_h2 ) + # Paternal component
( (Pr_MPbar[bc1, bc2] / Pr_DSib[bc1, bc2]) * sm_hap)  # Maternal component
lglk        <- lglk + as.numeric(log(lglk_hsib_i))
# if (sm_hap == 1)
# {
#   print(paste0("Maternal Half sub contribution", log(lglk_hsib_i)))
# } else {
#   print(paste0("Paternal Half sub contribution", log(lglk_hsib_i)))
# }
if (is.na(log(lglk_hsib_i)))
{
print("BAAD")
print(pars)
}
}
}
# Survival prior
if (data$surv_prior == 1)
{
print("HELP SUVIVAL PRIOR")
lglk <- lglk - ((Z_1 - Mu_Z1)^2) / (2.0 * SD_Z1^2)
}
print(pars)
print(lglk)
if (ret_mats == 0)
{
return(lglk = lglk)
} else {
exp_mops  <- Pr_MOP_noage * data$comb_mop
exp_fops  <- Pr_FOP_noage * data$comb_fop
exp_fsps  <- Pr_MP * data$comb_sib
exp_mhsps <- Pr_MPbar * data$comb_sib
exp_fhsps <- Pr_MbarP * data$comb_sib
exp_mats <- list(mops  = exp_mops,
fops  = exp_fops,
fsps  = exp_fsps,
mhsps = exp_mhsps,
fhsps = exp_fhsps)
return(list(lglk, exp_mats))
}
}
ciff_ckmr_loglik_mtdna(pars, ret_mats = 1)
exp.mats <- ciff_ckmr_loglik_mtdna(pars, ret_mats = 1)
exp.mats <- ciff_ckmr_loglik_mtdna(pars, ret_mats = 1)[[2]]
exp.mats
pars
exp.mats$fsps
# Maternal half-siblings
sum(get.ods(exp.mats$fsps, 0))
get.ods <- function(A, ofst)
{
A[row(A) == (col(A) - ofst)]
}
# Maternal half-siblings
sum(get.ods(exp.mats$fsps, 0))
# Maternal half-siblings
sum(get.ods(exp.mats$fsps, 0))
sum(get.ods(exp.mats$fsps, 1))
sum(get.ods(exp.mats$fsps, 2)) # 4
sum(get.ods(exp.mats$fsps, 3)) # 5
sum(get.ods(exp.mats$fsps, 4)) # 6
sum(get.ods(exp.mats$fsps, 5)) # 6
sum(exp.mats$fsps)
# Full siblings
sum(get.ods(exp.mats$fsps, 1))
# Full siblings
signif(sum(get.ods(exp.mats$fsps, 1)), 3)
signif(sum(get.ods(exp.mats$fsps, 2)), 3) # 2
signif(sum(get.ods(exp.mats$fsps, 3)), 3) # 3
signif(sum(get.ods(exp.mats$fsps, 4)), 3) # 4
signif(sum(get.ods(exp.mats$fsps, 5)), 3) # 5
sum(exp.mats$fsps)
signif(sum(get.ods(exp.mats$mhsps, 1)), 3)
signif(sum(get.ods(exp.mats$mhsps, 2)), 3) # 2
signif(sum(get.ods(exp.mats$mhsps, 3)), 3) # 3
signif(sum(get.ods(exp.mats$mhsps, 4)), 3) # 4
signif(sum(get.ods(exp.mats$mhsps, 5)), 3) # 5
signif(sum(get.ods(exp.mats$fhsps , 1)), 3)
signif(sum(get.ods(exp.mats$fhsps, 2)), 3) # 2
signif(sum(get.ods(exp.mats$fhsps, 3)), 3) # 3
signif(sum(get.ods(exp.mats$fhsps, 4)), 3) # 4
signif(sum(get.ods(exp.mats$fhsps, 5)), 3) # 5
sum(exp.mats$fhsps)
sum(exp.mats$fhsps)
sum(exp.mats$fsps)
sum(exp.mats$mhsps)
13+22+4
# paternal siblings
signif(sum(get.ods(exp.mats$fhsps , 1)), 3)
signif(sum(get.ods(exp.mats$fhsps, 2)), 3) # 2
signif(sum(get.ods(exp.mats$fhsps, 3)), 3) # 3
signif(sum(get.ods(exp.mats$fhsps, 4)), 3) # 4
signif(sum(get.ods(exp.mats$fhsps, 5)), 3) # 5
exp.mats$mops
signif(sum(get.ods(exp.mats$mops, 1)), 3)
signif(sum(get.ods(exp.mats$mops, 2)), 3) # 2
signif(sum(get.ods(exp.mats$mops, 3)), 3) # 3
signif(sum(get.ods(exp.mats$mops, 4)), 3) # 4
signif(sum(get.ods(exp.mats$mops, 5)), 3) # 5
exp.mats$mops
signif(sum(get.ods(exp.mats$mops, 6)), 3) # 5
sum(exp.mats$mops)
signif(sum(get.ods(exp.mats$fops, 1)), 3)
signif(sum(get.ods(exp.mats$fops, 2)), 3) # 2
signif(sum(get.ods(exp.mats$fops, 3)), 3) # 3
signif(sum(get.ods(exp.mats$fops, 4)), 3) # 4
signif(sum(get.ods(exp.mats$fops, 5)), 3) # 5
signif(sum(get.ods(exp.mats$fops, 6)), 3) # 5
sum(exp.mats$fops)
exp.mats$fops
# FOPS
signif(sum(get.ods(exp.mats$fops, 1)), 3)
# MOPS
sum(get.ods(exp.mats$mops, -1)) + sum(get.ods(exp.mats$mops, -3)) # 1 year diff
sum(get.ods(exp.mats$mops, 0))  + sum(get.ods(exp.mats$mops, -4)) # 2 year diff
sum(get.ods(exp.mats$mops, 1))  + sum(get.ods(exp.mats$mops, -5)) # 3 year diff
sum(get.ods(exp.mats$mops, 2)) # 4
sum(get.ods(exp.mats$mops, 3)) # 5
sum(get.ods(exp.mats$mops, 4)) # 6
signif(sum(get.ods(exp.mats$mops, -1)) + sum(get.ods(exp.mats$mops, -3)), 3)
signif(sum(get.ods(exp.mats$mops, -1)) + sum(get.ods(exp.mats$mops, -3)), 3) # 1 year diff
signif(sum(get.ods(exp.mats$mops, 0))  + sum(get.ods(exp.mats$mops, -4)), 3) # 2 year diff
signif(sum(get.ods(exp.mats$mops, 1))  + sum(get.ods(exp.mats$mops, -5)), 3) # 3 year diff
signif(sum(get.ods(exp.mats$mops, 2)), 3) # 4
signif(sum(get.ods(exp.mats$mops, 3)), 3) # 5
signif(sum(get.ods(exp.mats$mops, 4)), 3) # 6
sum(exp.mats$mops)
# FOPS
signif(sum(get.ods(exp.mats$fops, -1)) + sum(get.ods(exp.mats$fops, -3)), 3) # 1 year diff
signif(sum(get.ods(exp.mats$fops, 0))  + sum(get.ods(exp.mats$fops, -4)), 3) # 2 year diff
signif(sum(get.ods(exp.mats$fops, 1))  + sum(get.ods(exp.mats$fops, -5)), 3) # 3 year diff
signif(sum(get.ods(exp.mats$fops, 2)), 3) # 4
signif(sum(get.ods(exp.mats$fops, 3)), 3) # 5
signif(sum(get.ods(exp.mats$fops, 4)), 3) # 6
sum(exp.mats$mops)
sum(exp.mats$fops)
defo.sibs.fsps <- defo.sibs[which(defo.sibs$FSP == 1), ]
defo.sibs.fsps
defo.sibs.fsps <- defo.sibs[which(defo.sibs$SAME_HAP == 1), ]
defo.sibs.fsps
dim(defo.sibs.fsps)
21-4
defo.sibs.mhsps <- defo.sibs[which(defo.sibs$SAME_HAP == 1 &
defo.sibs$FSP != 1), ]
defo.sibs.mhsps
dim(defo.sibs.mhsps)
table(defo.sibs.mhsps$Ch_Gap)
defo.sibs.fhsps <- defo.sibs[which(defo.sibs$SAME_HAP != 1 &
defo.sibs$FSP != 1), ]
defo.sibs.fhsps
table(defo.sibs.fhsps$Ch_Gap)
data <- list(comb_mop   = as.array(mop.kin$mop.comp),
kin_mop    = as.array(mop.kin$mop.kin),
comb_fop   = as.array(fop.kin$ppop.comp),
kin_fop    = as.array(fop.kin$ppop.kin),
comb_sib   = as.array(sib.kin$sib.comp),
kin_sib    = as.array(sib.kin$sib.kin),
dsm_bc1    = as.array(df.sibs.tmb$IND1_BC),
dsm_bc2    = as.array(df.sibs.tmb$IND2_BC),
dsm_pi_h2  = as.array(df.sibs.tmb$HAP2_FRQ),
dsm_sm_hp  = as.array(df.sibs.tmb$SAME_HAP),
df_fsp_yn  = as.array(df.sibs.tmb$FSP),
symin      = min(Yad_range),
symax      = max(Yad_range),
bymin      = min(Bju_range),
bymax      = max(Bju_range),
lethal     = 0,
surv_prior = 1,
roi_prior  = 0,
fng_rate   = 1  - 0.081,
Mu_Z1      = 0.45, # 2 * log(0.57) - (1/2)*log(0.04^2 + 0.57^2), 2 * log(0.64) - (1/2)*log(0.02^2 + 0.64^2)  # 0.565
SD_Z1      = 0.07,  # sqrt(-2 * log(0.57) + log(0.04^2 + 0.57^2)), sqrt(-2 * log(0.64) + log(0.15^2 + 0.64^2)) # 0.07
Mu_R1      = 0,
SD_R1      = 0.1)
data      <- list(comb_mop  = as.array(mop.kin$mop.comp),
kin_mop   = as.array(mop.kin$mop.kin),
comb_fop  = as.array(fop.kin$ppop.comp),
kin_fop   = as.array(fop.kin$ppop.kin),
comb_sib  = as.array(sib.kin$sib.comp),
kin_sib   = as.array(sib.kin$sib.kin),
symin     = min(Yad_range),
symax     = max(Yad_range),
bymin     = min(Bju_range),
bymax     = max(Bju_range),
lethal    = 0,
surv_prior = 1,
fudge_factor = 1  - 0.081,
Mu_Z1 = 0.45,
SD_Z1 = 0.07,
sib_pairs = defo.sibs)
fit2 <- nlminb(pars,
NEG(ciff_ckmr_loglik_mtdna),
lower = c(1,  -20,  0, -10, -20),
upper = c(20,  20,  1,  10,  20))
fit2
pars <- fit2$par
exp.mats <- ciff_ckmr_loglik_mtdna(pars, ret_mats = 1)[[2]]
exp.mats
signif(sum(get.ods(exp.mats$mops, -1)) + sum(get.ods(exp.mats$mops, -3)), 3) # 1 year diff
signif(sum(get.ods(exp.mats$mops, 0))  + sum(get.ods(exp.mats$mops, -4)), 3) # 2 year diff
signif(sum(get.ods(exp.mats$mops, 1))  + sum(get.ods(exp.mats$mops, -5)), 3) # 3 year diff
signif(sum(get.ods(exp.mats$mops, 2)), 3) # 4
signif(sum(get.ods(exp.mats$mops, 3)), 3) # 5
signif(sum(get.ods(exp.mats$mops, 4)), 3) # 6
sum(exp.mats$mops)
signif(sum(get.ods(exp.mats$fops, -1)) + sum(get.ods(exp.mats$fops, -3)), 3) # 1 year diff
signif(sum(get.ods(exp.mats$fops, 0))  + sum(get.ods(exp.mats$fops, -4)), 3) # 2 year diff
signif(sum(get.ods(exp.mats$fops, 1))  + sum(get.ods(exp.mats$fops, -5)), 3) # 3 year diff
signif(sum(get.ods(exp.mats$fops, 2)), 3) # 4
signif(sum(get.ods(exp.mats$fops, 3)), 3) # 5
signif(sum(get.ods(exp.mats$fops, 4)), 3) # 6
sum(exp.mats$fops)
signif(sum(get.ods(exp.mats$fsps, 1)), 3)
signif(sum(get.ods(exp.mats$fsps, 2)), 3) # 2
signif(sum(get.ods(exp.mats$fsps, 3)), 3) # 3
signif(sum(get.ods(exp.mats$fsps, 4)), 3) # 4
signif(sum(get.ods(exp.mats$fsps, 5)), 3) # 5
sum(exp.mats$fsps)
signif(sum(get.ods(exp.mats$mhsps, 1)), 3)
signif(sum(get.ods(exp.mats$mhsps, 2)), 3) # 2
signif(sum(get.ods(exp.mats$mhsps, 3)), 3) # 3
signif(sum(get.ods(exp.mats$mhsps, 4)), 3) # 4
signif(sum(get.ods(exp.mats$mhsps, 5)), 3) # 5
sum(exp.mats$mhsps)
# maternal siblings
signif(sum(get.ods(exp.mats$mhsps, 1)), 3)
signif(sum(get.ods(exp.mats$mhsps, 2)), 3) # 2
signif(sum(get.ods(exp.mats$mhsps, 3)), 3) # 3
signif(sum(get.ods(exp.mats$mhsps, 5)), 3) # 5
sum(exp.mats$mhsps)
signif(sum(get.ods(exp.mats$fhsps , 1)), 3)
signif(sum(get.ods(exp.mats$fhsps, 2)), 3) # 2
signif(sum(get.ods(exp.mats$fhsps, 3)), 3) # 3
signif(sum(get.ods(exp.mats$fhsps, 4)), 3) # 4
signif(sum(get.ods(exp.mats$fhsps, 5)), 3) # 5
sum(exp.mats$fhsps)
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
dimnames(M) <- list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
(Xsq <- chisq.test(M))  # Prints test summary
Xsq$observed   # observed counts (same as M)
Xsq$expected   # expected counts under the null
Xsq$residuals  # Pearson residuals
Xsq$stdres     # standardized residuals
M
x <- c(A = 20, B = 15, C = 25)
chisq.test(x)
chisq.test(as.table(x))             # the same
x <- c(89,37,30,28,2)
p <- c(40,20,20,15,5)
x
p
chisq.test(x, p = p, rescale.p = TRUE)
# Expected count in category 5
# is 1.86 < 5 ==> chi square approx.
chisq.test(x, p = p)            #               maybe doubtful, but is ok!
chisq.test(x, p = p, simulate.p.value = TRUE)
(0 - 1.89)^2/1.89 +  (0-1.23)^2/1.23    +    (1-0.554)^2/0.554 + (0-0.256)^2/0.256  +  (0 - 0.029)^2/0.029 + (0 - 0.018)^2/0.018
qchisq(3.782054, 1)
pchisq(3.782054, 1)
1-0.948195
?chisq.test
obs <- c(0, 0, 1, 0, 0, 0)
exp <- c(1.89, 1.23, 0.554, 0.256, 0.029, 0.018)
chisq.test(obs, exp)
x <- chisq.test(obs, exp)
x$statistic
x$observed
(0 - 1.89)^2/1.89 +  (0-1.23)^2/1.23    +    (1-0.554)^2/0.554 + (0-0.256)^2/0.256  +  (0 - 0.029)^2/0.029 + (0 - 0.018)^2/0.018
pchisq(3.782054, df = 5)
(1 - 3.97)^2/3.97
pchisq(2.221889, df = 5)
pchisq(2.221889, df = 1)
pchisq(2.221889, df = 2)
obs <- c(3,  2,  0,       0,  0, 0)
exp <- c(8.11, 3.8, 1.47, 0.635, 0.066, 0.044)
sum((obs-exp)^2/exp)
sum((obs-exp)^2/exp)
sum((obs-exp)^2/exp)
pchisq(6.287373, 5)
pchisq(20.287373, 5)
scr <- sum((obs-exp)^2/exp)
pchisq(20.287373, 5)
1-pchisq(scr, 5)
obs <- c(6 ,  6  ,   3   , 2  , 0)
exp <-  c(8.35        ,  3.91   ,   1.17   , 0.238     , 0.049)
scr <- sum((obs-exp)^2/exp)
1-pchisq(scr, 4)
(obs-exp)^2/exp
2 - 0.238
(2 - 0.238)^2 / 0.238
obs <- c(6 ,    6,   3   , 1  , 0)
exp <-  c(8.35,  3.91,   1.17   , 0.238, 0.049)
scr <- sum((obs-exp)^2/exp)
1-pchisq(scr, 4)
signif(sum(get.ods(exp.mats$mhsps, 3)), 3) # 3
signif(sum(get.ods(exp.mats$mhsps, 1)), 3)
signif(sum(get.ods(exp.mats$mhsps, 2)), 3) # 2
signif(sum(get.ods(exp.mats$mhsps, 3)), 3) # 3
signif(sum(get.ods(exp.mats$mhsps, 4)), 3) # 4
signif(sum(get.ods(exp.mats$mhsps, 5)), 3) # 5
exp.mats$mhsps
defo.sibs
defo.sibs.mhsps
obs <- c(14 ,    9,   2   , 1  , 0)
exp <- c(14.2,  6.39,   1.86   , 0.374, 0.076)
sum((obs-exp)^2/exp)
(obs-exp)^2/exp
1-pchisq(scr, 4)
obs <- c(14 ,    9,   2   , 1  , 0)
exp <- c(14.2,  6.39,   1.86   , 0.374, 0.076)
scr <- sum((obs-exp)^2/exp)
1-pchisq(scr, 4)
1-pchisq(scr, 4)
obs <- c(6 ,    6,   3   , 2  , 0)
exp <-  c(8.35,  3.91,   1.17   , 0.238, 0.049)
scr <- sum((obs-exp)^2/exp)
1-pchisq(scr, 4)
obs <- c(6 ,    6,   3,  1, 0)
exp <-  c(8.35,  3.91,   1.17   , 0.238, 0.049)
scr <- sum((obs-exp)^2/exp)
scr
1-pchisq(scr, 4)
(obs-exp)^2/exp
fit2
data      <- list(comb_mop  = as.array(mop.kin$mop.comp),
kin_mop   = as.array(mop.kin$mop.kin),
comb_fop  = as.array(fop.kin$ppop.comp),
kin_fop   = as.array(fop.kin$ppop.kin),
comb_sib  = as.array(sib.kin$sib.comp),
kin_sib   = as.array(sib.kin$sib.kin),
symin     = min(Yad_range),
symax     = max(Yad_range),
bymin     = min(Bju_range),
bymax     = max(Bju_range),
lethal    = 0,
surv_prior = 1,
fudge_factor = 1  - 0.081,
Mu_Z1 = 0.565,
SD_Z1 = 0.07,
sib_pairs = defo.sibs)
fit2 <- nlminb(pars,
NEG(ciff_ckmr_loglik_mtdna),
lower = c(1,  -20,  0, -10, -20),
upper = c(20,  20,  1,  10,  20))
fit2
exp.mats <- ciff_ckmr_loglik_mtdna(pars, ret_mats = 1)[[2]]
signif(sum(get.ods(exp.mats$mhsps, 1)), 3)
signif(sum(get.ods(exp.mats$mhsps, 2)), 3) # 2
signif(sum(get.ods(exp.mats$mhsps, 3)), 3) # 3
signif(sum(get.ods(exp.mats$mhsps, 4)), 3) # 4
signif(sum(get.ods(exp.mats$mhsps, 5)), 3) # 5
signif(sum(get.ods(exp.mats$fsps, 1)), 3)
signif(sum(get.ods(exp.mats$fsps, 2)), 3) # 2
signif(sum(get.ods(exp.mats$fsps, 3)), 3) # 3
signif(sum(get.ods(exp.mats$fsps, 4)), 3) # 4
signif(sum(get.ods(exp.mats$fsps, 5)), 3) # 5
obs <- c(6 ,    6,   3,  2, 0)
exp <-  c(8.08,  4.06,   1.31   , 0.294, 0.0655)
scr <- sum((obs-exp)^2/exp)
scr
1-pchisq(scr, 4)
(obs-exp)^2/exp
exp(0.64)
exp(-0.64)
exp(-0.4)
exp(-0.45)
exp(-0.51)
exp(-0.511)
-log(0.511)
obs <- c(14 ,    9,   2   , 1  , 0)
exp <- c(14.2,  6.39,   1.86   , 0.374, 0.076)
scr <- sum((obs-exp)^2/exp)
1-pchisq(scr, 4)
signif(sum(get.ods(exp.mats$fhsps , 1)), 3)
signif(sum(get.ods(exp.mats$fhsps, 2)), 3) # 2
signif(sum(get.ods(exp.mats$fhsps, 3)), 3) # 3
signif(sum(get.ods(exp.mats$fhsps, 4)), 3) # 4
signif(sum(get.ods(exp.mats$fhsps, 5)), 3) # 5
sum(exp.mats$mhsps)
sum(exp.mats$fhsps)
defo.sibs.fhsps
dim(defo.sibs.fhsps)
(3-8)^2/8
